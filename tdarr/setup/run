#!/usr/bin/env bash
# -------------------------------------------------------------------------------------------------------------
# Arrbit - run module (Bootstrap Orchestrator)
# Version: v1.0.0-gs3.1.0
# Purpose: Bootstrap orchestrator â€“ runs setup first, then dependencies (fixed base /app/arrbit)
# Note: Minimal logging until helpers become available after setup.
# -------------------------------------------------------------------------------------------------------------

set -euo pipefail

TRACE_ID="run-$(date +%s)-$$"

# Fixed base path (allow override for test scenarios by exporting ARRBIT_BASE before exec)
ARRBIT_BASE="${ARRBIT_BASE:-/app/arrbit}"
REMOTE_SETUP_URL="https://raw.githubusercontent.com/prvctech/Arrbit/main/tdarr/setup/setup.bash"
DEPENDENCIES_SCRIPT="${ARRBIT_BASE}/setup/dependencies.bash"

SCRIPT_NAME="run"
SCRIPT_VERSION="v1.0.0-gs3.1.0"
LOG_DIR="${ARRBIT_BASE}/data/logs"
mkdir -p "${LOG_DIR}" 2>/dev/null || true
chmod 755 "${LOG_DIR}" 2>/dev/null || true
LOG_FILE="${LOG_DIR}/arrbit-${SCRIPT_NAME}-info-$(date '+%Y_%m_%d-%H_%M').log"
touch "${LOG_FILE}" 2>/dev/null || true
chmod 644 "${LOG_FILE}" 2>/dev/null || true

# Minimal single-line logging (prefix + level)
_ts(){ date '+%Y-%m-%dT%H:%M:%S%z'; }
log_info()    { printf '[%s] [INFO] [run] %s\n'    "$(_ts)" "$*" | tee -a "${LOG_FILE}"; }
log_warning() { printf '[%s] [WARN] [run] %s\n'    "$(_ts)" "$*" | tee -a "${LOG_FILE}"; }
log_error()   { printf '[%s] [ERROR] [run] %s\n'   "$(_ts)" "$*" | tee -a "${LOG_FILE}"; }

log_info "Bootstrap initializing (version ${SCRIPT_VERSION}, trace_id: ${TRACE_ID}, base=${ARRBIT_BASE})"

# Optional container stabilization delay (tunable via ARRBIT_BOOT_DELAY, default 5s)
BOOT_DELAY="${ARRBIT_BOOT_DELAY:-5}"
if [ "${BOOT_DELAY}" -gt 0 ] 2>/dev/null; then
  log_info "Stabilization delay ${BOOT_DELAY}s"; sleep "${BOOT_DELAY}" || true
fi

log_info "Running remote setup: ${REMOTE_SETUP_URL}"
if ! curl -fsSL "${REMOTE_SETUP_URL}" | bash; then
  log_error "Remote setup failed (url=${REMOTE_SETUP_URL})"
  printf '[Arrbit] ERROR: Remote setup failed url=%s trace_id=%s\n' "${REMOTE_SETUP_URL}" "${TRACE_ID}" >>"${LOG_FILE}"
  exit 1
fi
log_info "Remote setup completed"

if [ -x "${DEPENDENCIES_SCRIPT}" ]; then
  log_info "Executing dependencies script ${DEPENDENCIES_SCRIPT}"
  if ! bash "${DEPENDENCIES_SCRIPT}"; then
    log_warning "Dependencies script failed (continuing)"
    printf '[Arrbit] WARNING: Dependencies script failed: %s trace_id=%s\n' "${DEPENDENCIES_SCRIPT}" "${TRACE_ID}" >>"${LOG_FILE}"
  else
    log_info "Dependencies script completed"
  fi
else
  log_warning "Dependencies script missing: ${DEPENDENCIES_SCRIPT}"
  printf '[Arrbit] WARNING: Dependencies script missing: %s trace_id=%s\n' "${DEPENDENCIES_SCRIPT}" "${TRACE_ID}" >>"${LOG_FILE}"
fi

# Attempt to upgrade logging if helpers now exist
HELPERS_LOG_UTIL="${ARRBIT_BASE}/universal/helpers/logging_utils.bash"
if [ -f "${HELPERS_LOG_UTIL}" ]; then
  # shellcheck disable=SC1090
  . "${HELPERS_LOG_UTIL}" 2>/dev/null || true
  arrbitPurgeOldLogs 2>/dev/null || true
  log_info "Upgraded logging utilities loaded"
fi

log_info "Bootstrap completed (trace_id=${TRACE_ID})"
log_info "Log file: ${LOG_FILE}"
log_info "Idle tail to keep container alive"
exec tail -f /dev/null
