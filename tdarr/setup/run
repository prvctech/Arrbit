#!/usr/bin/env bash
# -------------------------------------------------------------------------------------------------------------
# Arrbit - run module (Bootstrap Orchestrator)
# Version: v1.0.0-gs3.1.2
# Purpose: Bootstrap orchestrator â€“ runs setup first, then dependencies (fixed base /app/arrbit)
# Note: Minimal logging until helpers become available after setup.
# -------------------------------------------------------------------------------------------------------------

set -euo pipefail


# Fixed base path (allow override for test scenarios by exporting ARRBIT_BASE before exec)
ARRBIT_BASE="${ARRBIT_BASE:-/app/arrbit}"
REMOTE_SETUP_URL="https://raw.githubusercontent.com/prvctech/Arrbit/main/tdarr/setup/setup.bash"
DEPENDENCIES_SCRIPT="${ARRBIT_BASE}/setup/dependencies.bash"

SCRIPT_NAME="run"
SCRIPT_VERSION="v1.0.0-gs3.1.2"
LOG_DIR="${ARRBIT_BASE}/data/logs"
mkdir -p "${LOG_DIR}" 2>/dev/null || true
chmod 755 "${LOG_DIR}" 2>/dev/null || true
LOG_FILE="${LOG_DIR}/arrbit-${SCRIPT_NAME}-info-$(date '+%Y_%m_%d-%H_%M').log"
touch "${LOG_FILE}" 2>/dev/null || true
chmod 644 "${LOG_FILE}" 2>/dev/null || true

# Minimal bootstrap logging (INFO/WARN/ERROR only)
  log_info(){ printf '[INFO] %s\n' "$*" >>"${LOG_FILE}"; }
  log_warning(){ printf '[WARN] %s\n' "$*" >>"${LOG_FILE}"; }
  log_error(){ printf '[ERROR] %s\n' "$*" >>"${LOG_FILE}"; }

log_info "Bootstrap initializing (version ${SCRIPT_VERSION}, base=${ARRBIT_BASE})"

# Optional container stabilization delay (tunable via ARRBIT_BOOT_DELAY, default 5s)
BOOT_DELAY="${ARRBIT_BOOT_DELAY:-5}"
if [ "${BOOT_DELAY}" -gt 0 ] 2>/dev/null; then
  log_info "Stabilization delay ${BOOT_DELAY}s"; sleep "${BOOT_DELAY}" || true
fi

log_info "Running remote setup: ${REMOTE_SETUP_URL}"
if ! curl -fsSL "${REMOTE_SETUP_URL}" | bash; then
  log_error "Remote setup failed (url=${REMOTE_SETUP_URL})"
  exit 1
fi
log_info "Remote setup completed"

if [ -x "${DEPENDENCIES_SCRIPT}" ]; then
  log_info "Executing dependencies script ${DEPENDENCIES_SCRIPT}"
  if ! bash "${DEPENDENCIES_SCRIPT}"; then
    log_warning "Dependencies script failed (continuing)"
  else
    log_info "Dependencies script completed"
  fi
else
  log_warning "Dependencies script missing: ${DEPENDENCIES_SCRIPT}"
fi

# Helpers intentionally not sourced to preserve silent bootstrap per Golden Standard.

log_info "Bootstrap completed"
log_info "Log file: ${LOG_FILE}"
log_info "Idle tail to keep container alive"
exec tail -f /dev/null
